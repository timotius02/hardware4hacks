// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url      = env("DATABASE_URL")
}

model Example {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Necessary for Next auth
model Account {
  id                       String  @id @default(cuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String? // @db.Text
  refresh_token_expires_in String?
  access_token             String? // @db.Text
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String? // @db.Text
  session_state            String?
  user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  role          Role      @default(USER)

  itemCart     ItemsInCarts[]
  reservations ItemReservation[]

  reservableCart         ReservablesInCarts[]
  reservableReservations ReservableReservation[]
}

enum Role {
  USER
  ORGANIZER
  ADMIN
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Hackathon {
  id         String       @id @default(cuid())
  name       String
  url        String
  banner     String
  logo       String
  date       String // TODO: Convert to DateTime
  city       String
  state      String
  items      Item[]
  reservable Reservable[]
}

model Item {
  id          String    @id @default(cuid())
  name        String
  image       String
  imageAlt    String
  count       Int
  hackathon   Hackathon @relation(fields: [hackathonId], references: [id], onDelete: Cascade)
  hackathonId String

  userCarts    ItemsInCarts[]
  reservations ItemReservation[]
}

model Reservable {
  id           String                  @id @default(cuid())
  name         String
  image        String
  imageAlt     String
  date         String
  startTime    String
  endTime      String
  timeInterval Int // 15, 30 or 60 minutes
  hackathon    Hackathon               @relation(fields: [hackathonId], references: [id], onDelete: Cascade)
  hackathonId  String
  reservations ReservableReservation[]

  userCarts ReservablesInCarts[]
}

model ItemsInCarts {
  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId   String
  item     Item     @relation(fields: [itemId], references: [id], onDelete: Cascade)
  itemId   String
  addedOn  DateTime @default(now())
  quantity Int

  @@id([userId, itemId])
}

model ReservablesInCarts {
  user         User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId       String
  reservable   Reservable @relation(fields: [reservableId], references: [id], onDelete: Cascade)
  reservableId String
  addedOn      DateTime   @default(now())
  date         DateTime

  @@id([userId, reservableId])
}

model ItemReservation {
  id         String  @id @default(cuid())
  user       User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     String
  item       Item    @relation(fields: [itemId], references: [id], onDelete: Cascade)
  itemId     String
  quantity   Int
  isApproved Boolean @default(false)
}

model ReservableReservation {
  id           String     @id @default(cuid())
  user         User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId       String
  reservable   Reservable @relation(fields: [reservableId], references: [id], onDelete: Cascade)
  reservableId String
  isApproved   Boolean    @default(false)
  date         DateTime
}
